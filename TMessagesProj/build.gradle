// forky start
import dev.diskria.darlingram.toolkit.extensions.ProjectExtKt
import dev.diskria.darlingram.tools.kotlin.extensions.StringExtKt
// forky end
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

// forky commented apply plugin: 'com.android.library'
// forky start
plugins {
    alias(config.plugins.android.library)
    alias(tools.plugins.toolkit)
}
// forky end

/* forky commented
repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}
*/

dependencies {
    implementation 'androidx.fragment:fragment:1.2.0'
    implementation 'androidx.core:core:1.10.1'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.6'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.2.0"
    implementation 'androidx.interpolator:interpolator:1.0.0'
    implementation 'androidx.biometric:biometric:1.1.0'

    implementation 'com.google.android.gms:play-services-cast-framework:21.4.0'
    implementation "androidx.mediarouter:mediarouter:1.7.0"
    implementation 'org.nanohttpd:nanohttpd:2.3.1'

    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation 'com.google.firebase:firebase-config:21.0.1'
    implementation 'com.google.firebase:firebase-datatransport:18.1.0'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.4.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:18.0.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.mlkit:language-id:16.1.1'
    implementation 'com.android.billingclient:billing:6.0.1'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.google.guava:guava:31.1-android'
    /* forky commented
    implementation 'com.google.android.play:integrity:1.3.0'
    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'
    */

    implementation 'com.google.android.gms:play-services-mlkit-subject-segmentation:16.0.0-beta1'
    implementation 'com.google.android.gms:play-services-mlkit-image-labeling:16.0.8'

    /* forky commented
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }
    */
    implementation 'com.google.android.recaptcha:recaptcha:18.4.0'

    // forky commented coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    coreLibraryDesugaring(libs.desugar) // forky
}

def isWindows = String.valueOf(DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.WINDOWS)
android {
    /* forky commented
    compileSdkVersion 34
    buildToolsVersion '34.0.0'
    */
    compileSdk = config.versions.compile.sdk.get().toInteger() // forky
    ndkVersion /* forky commented "21.4.7075529" */ /* forky start */ = config.versions.ndk.get() /* forky end */

    // forky commented sourceSets.main.jniLibs.srcDirs = ['./jni/']

    def cmakeVersion = config.versions.cmake.get() // forky
    externalNativeBuild {
        cmake {
            version = cmakeVersion // forky
            path 'jni/CMakeLists.txt'
        }
    }

    /* forky commented lintOptions */ /* forky start */ lint /* forky end */ {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
        // forky start
        disable 'OldTargetApi'
        disable 'GradleDependency'
        disable 'Aligned16KB'
        // forky end
    }

    /* forky commented
    dexOptions {
        jumboMode = true
    }
    */

    compileOptions {
        /* forky commented
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        */
        sourceCompatibility = targetCompatibility = config.versions.java.get() // forky

        coreLibraryDesugaringEnabled /* forky start */ = /* forky end */ true
    }

    // forky start
    androidComponents {
        beforeVariants(selector().withBuildType("release")) { variantBuilder ->
            variantBuilder.enable = false
        }
    }
    // forky end

    defaultConfig {
        /* forky commented
        minSdkVersion 19
        targetSdkVersion 34
        */
        minSdk = config.versions.min.sdk.get().toInteger() // forky

        // forky commented vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        multiDexEnabled /* forky start */ = /* forky end */ true

        externalNativeBuild {
            cmake {
                version /* forky commented '3.10.2' */ /* forky start */ = cmakeVersion /* forky end */
                // forky commented arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-16'
                // forky start
                arguments config.versions.args.cmake.get()
                def abiFiltersList = ProjectExtKt.getLocalProperty(rootProject, "ABI_FILTERS")
                if (abiFiltersList == null) {
                    abiFiltersList = config.versions.default.abis.get()
                }
                abiFilters(*abiFiltersList.split(',').collect { it.trim() })
                // forky end
            }
        }
    }

    buildTypes {
        debug {
            /* forky commented
            jniDebuggable true
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro', '../TMessagesProj/proguard-rules-beta.pro'
            ndk.debugSymbolLevel = 'FULL'
            */
            buildConfigField "String", "BUILD_VERSION_STRING", /* forky commented "\"" + APP_VERSION_NAME + "\"" */ /* forky start */ "\"\"" /* forky end */
            /* forky commented
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "String", "BETA_URL", "\"" + getProps("BETA_PRIVATE_URL") + "\""
            */
            buildConfigField "boolean", "DEBUG_VERSION", /* forky commented "true" */ /* forky start */ "false" /* forky end */
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", /* forky commented "true" */ /* forky start */ "false" /* forky end */
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
            // forky start
            def darlingramLocalProperties = new Properties()
            darlingramLocalProperties.load(file('../Darlingram/local.properties').newInputStream())
            def apiId = darlingramLocalProperties.getProperty("API_ID")
            def apiHash = darlingramLocalProperties.getProperty("API_HASH")
            if (apiId == null || apiHash == null) {
                throw new GradleException("Missing API_ID and/or API_HASH in local.properties!")
            }
            buildConfigField "int", "API_ID", apiId
            buildConfigField "String", "API_HASH", StringExtKt.wrapWithDoubleQuote(apiHash)
            // forky end
        }

        /* forky commented
        HA_private {
            jniDebuggable false
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro', '../TMessagesProj/proguard-rules-beta.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
            buildConfigField "String", "APP_CENTER_HASH", "\"" + getProps("APP_CENTER_HASH_PRIVATE") + "\""
            buildConfigField "String", "BETA_URL", "\"" + getProps("BETA_PRIVATE_URL") + "\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

        HA_public {
            jniDebuggable false
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro', '../TMessagesProj/proguard-rules-beta.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
            buildConfigField "String", "APP_CENTER_HASH", "\"" + getProps("APP_CENTER_HASH_PUBLIC") + "\""
            buildConfigField "String", "BETA_URL", "\"" + getProps("BETA_PUBLIC_URL") + "\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

        HA_hardcore {
            jniDebuggable false
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro', '../TMessagesProj/proguard-rules-beta.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
            buildConfigField "String", "APP_CENTER_HASH", "\"" + getProps("APP_CENTER_HASH_HARDCORE") + "\""
            buildConfigField "String", "BETA_URL", "\"" + getProps("BETA_HARDCORE_URL") + "\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

        standalone {
            jniDebuggable false
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "String", "BETA_URL", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "false"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

        release {
            jniDebuggable false
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "String", "BETA_URL", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "false"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }
        */
    }
    namespace /* forky start */ = /* forky end */ 'org.telegram.messenger'
    // forky start
    buildFeatures {
        buildConfig = true
    }
    // forky end
}

/* forky commented
def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return "";
    }
}
apply plugin: 'com.google.gms.google-services'

task checkVisibility {
    doFirst {
        def isPrivateBuild = project.gradle.startParameter.taskNames.find {
            it.contains("HA_private") || it.contains("HA_hardcore") || it.contains("Debug") || it.contains("Release")
        }
        def isPublicAllowed = !project.hasProperty("IS_PRIVATE") || !project.property("IS_PRIVATE").toBoolean()
        if (!isPrivateBuild && !isPublicAllowed) {
            throw new GradleException("Building public version of private code!")
        }
    }
    doLast {
        if (project.gradle.startParameter.taskNames.find { it.contains("HA_public") }) {
            def privateBuild = file("${projectDir}_AppHockeyApp/afat/HA_private/Telegram-Beta.apk")
            if (privateBuild.exists()) {
                privateBuild.delete()
            }
        }
    }
}

preBuild.dependsOn checkVisibility
*/