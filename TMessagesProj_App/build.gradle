// forky start
import dev.diskria.darlingram.toolkit.extensions.ProjectExtKt
import dev.diskria.darlingram.toolkit.plugin.tasks.CleanCMakeCacheTask
import dev.diskria.darlingram.toolkit.plugin.tasks.ExportAPKTask
import dev.diskria.darlingram.toolkit.plugin.tasks.GradleToolkitTaskKt
import kotlin.jvm.JvmClassMappingKt
// forky end
// forky commented apply plugin: 'com.android.application'

// forky start
plugins {
    alias(config.plugins.android.app)
    alias(tools.plugins.toolkit)
}
// forky end
/* forky commented
repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}
*/

configurations./* forky commented all */ /* forky start */ configureEach /* forky end */ {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

dependencies {
    implementation project(':TMessagesProj')
    implementation 'androidx.multidex:multidex:2.0.1'
    // forky commented coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    coreLibraryDesugaring(libs.desugar) // forky
    implementation files('../TMessagesProj/libs/libgsaverification-client.aar')
}

android {
    /* forky commented
    compileSdkVersion 34
    buildToolsVersion '34.0.0'
    */
    compileSdk = config.versions.compile.sdk.get().toInteger() // forky

    defaultConfig.applicationId = APP_PACKAGE

    // forky commented sourceSets.main.jniLibs.srcDirs = ['../TMessagesProj/jni/']

    /* forky commented lintOptions */ /* forky start */ lint /* forky end */ {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
        // forky start
        disable 'OldTargetApi'
        disable 'GradleDependency'
        disable 'ChromeOsAbiSupport'
        // forky end
    }

    /* forky commented
    dexOptions {
        jumboMode = true
    }
    */

    compileOptions {
        /* forky commented
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        */
        sourceCompatibility = targetCompatibility = config.versions.java.get() // forky

        coreLibraryDesugaringEnabled /* forky start */ = /* forky end */ true
    }

    signingConfigs {
        debug {
            /* forky commented
            storeFile file("../TMessagesProj/config/release.keystore")
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            */
        }

        /* forky commented
        release {
            storeFile file("../TMessagesProj/config/release.keystore")
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
        */
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig /* forky start */ = /* forky end */ signingConfigs.debug
            applicationIdSuffix ".beta"
            minifyEnabled false
            shrinkResources /* forky start */ = /* forky end */ false
            multiDexEnabled /* forky start */ = /* forky end */ true
            /* forky commented
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro', '../TMessagesProj/proguard-rules-beta.pro'
            ndk.debugSymbolLevel = 'FULL'
            */
            // forky start
            ndk.debugSymbolLevel = 'NONE'
            applicationIdSuffix null
            // forky end
        }

        /* forky commented
        standalone {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            applicationIdSuffix ".web"
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
        */
    }

    sourceSets.debug {
        // forky commented manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest.xml'
        manifest.srcFile ProjectExtKt.directories(project).getTelegramAndroidManifestMinSDK23() // forky
    }

    /* forky commented
    sourceSets.standalone {
        manifest.srcFile '../TMessagesProj/config/release/AndroidManifest.xml'
    }

    sourceSets.release {
        manifest.srcFile '../TMessagesProj/config/release/AndroidManifest.xml'
    }
    */

    // forky commented flavorDimensions "minApi"
    flavorDimensions "afat" // forky

    productFlavors {
        /* forky commented
        bundleAfat {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
            ext {
                abiVersionCode = 1
            }
        }
        bundleAfat_SDK23 {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
            sourceSets.debug {
                manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_SDK23.xml'
            }
            minSdkVersion 23
            ext {
                abiVersionCode = 2
            }
        }
        */
        afat {
            dimension "afat" // forky
            ndk {
                // forky commented abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
                // forky start
                def abiFiltersList = ProjectExtKt.getForkLocalProperty(project, "ABI_FILTERS")
                if (abiFiltersList == null) {
                    abiFiltersList = config.versions.default.abis.get()
                }
                abiFilters(*abiFiltersList.split(',').collect { it.trim() })
                // forky end
            }
            sourceSets.debug {
                manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest_SDK23.xml'
            }
            /* forky commented
            sourceSets.release {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_SDK23.xml'
            }
            sourceSets.standalone {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_standalone.xml'
            }
            */
            ext {
                abiVersionCode = 9
            }
        }
    }

    defaultConfig.versionCode = Integer.parseInt(APP_VERSION_CODE)

    applicationVariants./* forky commented all */ /* forky start */ configureEach /* forky end */ { variant ->
        variant.outputs./* forky commented all */ /* forky start */ configureEach /* forky end */ { output ->
            outputFileName = "app.apk"
            output.versionCodeOverride = defaultConfig.versionCode * 10 + variant.productFlavors.get(0).abiVersionCode
        }
    }

    /* forky commented
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("afat")) {
            setIgnore(true)
        }
    }
    */
    // forky start
    androidComponents {
        beforeVariants(selector().withBuildType("release")) { variantBuilder ->
            variantBuilder.enable = false
        }
    }
    // forky end

    defaultConfig {
        /* forky commented
        minSdkVersion 19
        targetSdkVersion 34
        */
        // forky start
        minSdk = config.versions.min.sdk.get().toInteger()
        targetSdk = config.versions.target.sdk.get().toInteger()
        // forky end
        versionName /* forky start */ = /* forky end */ APP_VERSION_NAME
        ndkVersion /* forky commented "21.4.7075529" */ /* forky start */ = config.versions.ndk.get() /* forky end */

        multiDexEnabled /* forky start */ = /* forky end */ true

        // forky commented vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        externalNativeBuild {
            cmake {
                version /* forky commented '3.10.2' */ /* forky start */ = config.versions.cmake.get() /* forky end */
                // forky commented arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-16'
                // forky start
                arguments config.versions.args.cmake.get()
                def abiFiltersList = ProjectExtKt.getForkLocalProperty(project, "ABI_FILTERS")
                if (abiFiltersList == null) {
                    abiFiltersList = config.versions.default.abis.get()
                }
                abiFilters(*abiFiltersList.split(',').collect { it.trim() })
                // forky end
            }
        }
    }

    buildFeatures {
        buildConfig = true
    }
    namespace /* forky start */ = /* forky end */ 'org.telegram.messenger.regular'

    /* forky commented
    lintOptions {
        checkReleaseBuilds false
    }
    */
}

// forky commented apply plugin: 'com.google.gms.google-services'
// forky start
tasks.matching { it.name.startsWith("assemble") }.configureEach {
    finalizedBy tasks.named(GradleToolkitTaskKt.getDisplayName(JvmClassMappingKt.getKotlinClass(
            ExportAPKTask.class
    )))
}
tasks.named("clean") {
    finalizedBy tasks.named(GradleToolkitTaskKt.getDisplayName(JvmClassMappingKt.getKotlinClass(
            CleanCMakeCacheTask.class
    )))
}
// forky end
